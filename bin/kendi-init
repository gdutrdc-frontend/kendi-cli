#!/usr/bin/env node

var download = require('download-git-repo')
var program = require('commander')
var exists = require('fs').existsSync
var path = require('path')
var ora = require('ora')
var home = require('user-home')
var chalk = require('chalk')
var tildify = require('tildify')
var generate = require('../lib/generate');
var inquirer = require('inquirer')
var rm = require('rimraf').sync
var logger = require('../lib/logger')
var checkVersion = require('../lib/check-version')
var localPath = require('../lib/local-path')

var isLocalPath = localPath.isLocalPath
var getTemplatePath = localPath.getTemplatePath

/**
 * Usage.
 */

program
  .usage('<project-name>')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ kendi init my-project')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Settings.
 */

var rawName = program.args[0]
var inPlace = !rawName || rawName === '.'
var name = inPlace ? path.relative('../', process.cwd()) : rawName
var to = path.resolve(rawName || '.')
var clone = program.clone || false

var tmp = path.join(home, '.kendi-templates')
var template = '';
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(function(answers) {
      if (answers.ok) {
        run()
      }
  })
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

function run () {
  if (isLocalPath(template) && program.offline) {
    var templatePath = getTemplatePath(template)
    if (exists(templatePath)) {
      generate(name, templatePath, to, 'template', function (err) {
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', name)
      })
    } else {
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    checkVersion(function () {
      // use official templates
      var officialTemplate = 'gisonyeung/kendi-tpl'
      downloadAndGenerate(officialTemplate)
    })
  }
}


/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  var spinner = ora('downloading template')
  spinner.start()
  // Remove if local template exists
  if (exists(tmp)) rm(tmp)
  download(template, tmp, { clone: clone }, function (err) {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    generate(name, tmp, to, 'template', function (err) {
      if (err) return logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}
